@page "/Posts/{id:int}"
@using HttpClients.ClientInterfaces
@using Domain

@inject IPostService postService

@if (post == null)
{
    <p>No Post to display</p>
}
else
{
    <Button Color="Color.Dark" Type="ButtonType.Link" To="/Posts" Margin="Margin.Is2.FromBottom">Back</Button>
    
    <Jumbotron Background="Background.Light" Margin="Margin.Is4.FromBottom">
        <JumbotronTitle Size="JumbotronTitleSize.Is4">@post.Title</JumbotronTitle>
        <JumbotronSubtitle>
            By: @post.Author.Username
        </JumbotronSubtitle>
        <Divider></Divider>
        <Paragraph>
            <AuthorizeView>
                <Authorized>
                    @post.Body;
                </Authorized>
                <NotAuthorized>
                    @LeetText(post.Body);
                </NotAuthorized>
            </AuthorizeView>
            
        </Paragraph>
    </Jumbotron>
}
@if (!string.IsNullOrEmpty(message))
{
    <label style="color: red">@message</label>
}

@code {
    [Parameter]
    public int Id { get; set; }
    
    private Post? post = null;
    private string message = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            post = await postService.GetByIdAsync(Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            message = e.Message;
        }
    }


    private string LeetText(string text)
    {
        Dictionary<char, string> translator = new Dictionary<char, string>
        {
            {'a', "4"},
            {'b', "6"},
            {'c', "("},
            {'d', "[)"},    
            {'e', "3"},
            {'f', "|="},
            {'g', "9"},
            {'h', "|-|"},
            {'i', "!"},
            {'j', "_|"},
            {'k', "]{"},
            {'l', "1"},
            {'m', "|\\/|"},
            {'n', "|\\|"},
            {'o', "0"},
            {'p', "|°"},
            {'q', "(,)"},
            {'r', "1²"},
            {'s', "5"},
            {'t', "7"},
            {'u', "(_)"},
            {'v', "\\/"},
            {'w', "'//"},
            {'x', "><"},
            {'y', "'/"},
            {'z', "7_"},
        };

        string leeted = text.ToLower();
        string result = "";
        foreach (char c  in leeted)
        {
            if (translator.ContainsKey(c))
                result += translator[c];
            else
                result += c;
        }

        return result;
    }
    
}
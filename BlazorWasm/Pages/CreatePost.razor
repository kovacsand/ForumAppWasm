@page "/CreatePost"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using System.Security.Claims
@inject IPostService postService
@inject NavigationManager navMgr  

@attribute [Authorize]

<div class="card">
    <h3>Create Post</h3>
    <div class="field">
        <label>Title:</label>
        <TextEdit Placeholder="Title" @bind-Text="@title"></TextEdit>
    </div>
    <div class="field">
        <label>Body:</label>
        <MemoEdit AutoSize Placeholder="Body" ReplaceTab TabSize="4" @bind-Text="@body"></MemoEdit>
    </div>
    
    @if (!string.IsNullOrEmpty(msg))
    {
        <div class="field">
            <label style="color: red">
                @msg
            </label>
        </div>
    }
    <div class="field">
        <Button Color="Color.Dark" Clicked='() => navMgr.NavigateTo("Posts")'>Cancel</Button>
        <Button Color="Color.Primary" Clicked="Create">Post</Button>
    </div>
</div>

@code {
    private string title = "";
    private string body = "";

    private string msg = "";

    private int userId = 1;

    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; } = null!;

    private IEnumerable<Claim>? userClaims;
    private bool isLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationState authenticationState = await AuthState;
        ClaimsPrincipal user = authenticationState.User;
        isLoggedIn = user.Identity != null;

        if (!isLoggedIn)
            return;

        userClaims = user.Claims;
        userId = Convert.ToInt32(user.Claims.First(claim => claim.Type.Equals("Id")).Value);
    }
    
    private async Task Create()
    {
        msg = "";
        if (userId == null)
        {
            msg = "You must select an assignee!";
            return;
        }
        if (string.IsNullOrEmpty(title))
        {
            msg = "Title cannot be empty!";
            return;
        }
        if (string.IsNullOrEmpty(body))
        {
            msg = "Body cannot be empty!";
            return;
        }

        try
        {
            PostCreationDto dto = new(userId, title, body);
            await postService.CreateAsync(dto);
            navMgr.NavigateTo("/Posts");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    }

}